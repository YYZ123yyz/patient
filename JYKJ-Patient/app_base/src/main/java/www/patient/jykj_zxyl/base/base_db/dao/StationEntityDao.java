package www.patient.jykj_zxyl.base.base_db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import www.patient.jykj_zxyl.base.base_db.entity.StationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "station".
*/
public class StationEntityDao extends AbstractDao<StationEntity, Long> {

    public static final String TABLENAME = "station";

    /**
     * Properties of entity StationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsChoosed = new Property(1, boolean.class, "isChoosed", false, "is_choosed");
        public final static Property ShortId = new Property(2, String.class, "shortId", false, "short_id");
        public final static Property CorpusId = new Property(3, long.class, "corpusId", false, "corpus_id");
        public final static Property CorpusName = new Property(4, String.class, "corpusName", false, "corpus_name");
        public final static Property Icon = new Property(5, String.class, "icon", false, "head_img");
        public final static Property Summary = new Property(6, String.class, "summary", false, "summary");
        public final static Property Status = new Property(7, int.class, "status", false, "status");
        public final static Property StatusDesc = new Property(8, String.class, "statusDesc", false, "status_desc");
        public final static Property SortTimeLong = new Property(9, long.class, "sortTimeLong", false, "sort_time_long");
        public final static Property MasterAccId = new Property(10, long.class, "masterAccId", false, "master_accId");
    }


    public StationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"station\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"is_choosed\" INTEGER NOT NULL ," + // 1: isChoosed
                "\"short_id\" TEXT," + // 2: shortId
                "\"corpus_id\" INTEGER NOT NULL ," + // 3: corpusId
                "\"corpus_name\" TEXT," + // 4: corpusName
                "\"head_img\" TEXT," + // 5: icon
                "\"summary\" TEXT," + // 6: summary
                "\"status\" INTEGER NOT NULL ," + // 7: status
                "\"status_desc\" TEXT," + // 8: statusDesc
                "\"sort_time_long\" INTEGER NOT NULL ," + // 9: sortTimeLong
                "\"master_accId\" INTEGER NOT NULL );"); // 10: masterAccId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"station\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsChoosed() ? 1L: 0L);
 
        String shortId = entity.getShortId();
        if (shortId != null) {
            stmt.bindString(3, shortId);
        }
        stmt.bindLong(4, entity.getCorpusId());
 
        String corpusName = entity.getCorpusName();
        if (corpusName != null) {
            stmt.bindString(5, corpusName);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
        stmt.bindLong(8, entity.getStatus());
 
        String statusDesc = entity.getStatusDesc();
        if (statusDesc != null) {
            stmt.bindString(9, statusDesc);
        }
        stmt.bindLong(10, entity.getSortTimeLong());
        stmt.bindLong(11, entity.getMasterAccId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsChoosed() ? 1L: 0L);
 
        String shortId = entity.getShortId();
        if (shortId != null) {
            stmt.bindString(3, shortId);
        }
        stmt.bindLong(4, entity.getCorpusId());
 
        String corpusName = entity.getCorpusName();
        if (corpusName != null) {
            stmt.bindString(5, corpusName);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
        stmt.bindLong(8, entity.getStatus());
 
        String statusDesc = entity.getStatusDesc();
        if (statusDesc != null) {
            stmt.bindString(9, statusDesc);
        }
        stmt.bindLong(10, entity.getSortTimeLong());
        stmt.bindLong(11, entity.getMasterAccId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StationEntity readEntity(Cursor cursor, int offset) {
        StationEntity entity = new StationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isChoosed
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shortId
            cursor.getLong(offset + 3), // corpusId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // corpusName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // summary
            cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // statusDesc
            cursor.getLong(offset + 9), // sortTimeLong
            cursor.getLong(offset + 10) // masterAccId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsChoosed(cursor.getShort(offset + 1) != 0);
        entity.setShortId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCorpusId(cursor.getLong(offset + 3));
        entity.setCorpusName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setStatusDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSortTimeLong(cursor.getLong(offset + 9));
        entity.setMasterAccId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
