package www.patient.jykj_zxyl.base.base_db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import www.patient.jykj_zxyl.base.base_db.entity.UploadFileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "upload_file_entity".
*/
public class UploadFileEntityDao extends AbstractDao<UploadFileEntity, Long> {

    public static final String TABLENAME = "upload_file_entity";

    /**
     * Properties of entity UploadFileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContentId = new Property(1, long.class, "contentId", false, "content_id");
        public final static Property QuId = new Property(2, long.class, "quId", false, "quId");
        public final static Property AnsId = new Property(3, long.class, "ansId", false, "ansId");
        public final static Property MedialNetUrl = new Property(4, String.class, "medialNetUrl", false, "medial_net_url");
        public final static Property MedialFileType = new Property(5, String.class, "medialFileType", false, "medial_file_type");
        public final static Property MedialFilePath = new Property(6, String.class, "medialFilePath", false, "medial_file_path");
        public final static Property MedialFilePic = new Property(7, String.class, "medialFilePic", false, "medial_file_pic");
        public final static Property MedialFilePathSuffix = new Property(8, String.class, "medialFilePathSuffix", false, "medial_fille_path_suffix");
        public final static Property AudioJson = new Property(9, String.class, "audioJson", false, "audio_json");
        public final static Property UploadStatus = new Property(10, int.class, "uploadStatus", false, "upload_status");
        public final static Property MedialFileCompressPath = new Property(11, String.class, "medialFileCompressPath", false, "medial_file_compress_path");
        public final static Property ResourseType = new Property(12, int.class, "resourseType", false, "resourse_type");
    }


    public UploadFileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UploadFileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"upload_file_entity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"content_id\" INTEGER NOT NULL ," + // 1: contentId
                "\"quId\" INTEGER NOT NULL ," + // 2: quId
                "\"ansId\" INTEGER NOT NULL ," + // 3: ansId
                "\"medial_net_url\" TEXT," + // 4: medialNetUrl
                "\"medial_file_type\" TEXT," + // 5: medialFileType
                "\"medial_file_path\" TEXT," + // 6: medialFilePath
                "\"medial_file_pic\" TEXT," + // 7: medialFilePic
                "\"medial_fille_path_suffix\" TEXT," + // 8: medialFilePathSuffix
                "\"audio_json\" TEXT," + // 9: audioJson
                "\"upload_status\" INTEGER NOT NULL ," + // 10: uploadStatus
                "\"medial_file_compress_path\" TEXT," + // 11: medialFileCompressPath
                "\"resourse_type\" INTEGER NOT NULL );"); // 12: resourseType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"upload_file_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadFileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContentId());
        stmt.bindLong(3, entity.getQuId());
        stmt.bindLong(4, entity.getAnsId());
 
        String medialNetUrl = entity.getMedialNetUrl();
        if (medialNetUrl != null) {
            stmt.bindString(5, medialNetUrl);
        }
 
        String medialFileType = entity.getMedialFileType();
        if (medialFileType != null) {
            stmt.bindString(6, medialFileType);
        }
 
        String medialFilePath = entity.getMedialFilePath();
        if (medialFilePath != null) {
            stmt.bindString(7, medialFilePath);
        }
 
        String medialFilePic = entity.getMedialFilePic();
        if (medialFilePic != null) {
            stmt.bindString(8, medialFilePic);
        }
 
        String medialFilePathSuffix = entity.getMedialFilePathSuffix();
        if (medialFilePathSuffix != null) {
            stmt.bindString(9, medialFilePathSuffix);
        }
 
        String audioJson = entity.getAudioJson();
        if (audioJson != null) {
            stmt.bindString(10, audioJson);
        }
        stmt.bindLong(11, entity.getUploadStatus());
 
        String medialFileCompressPath = entity.getMedialFileCompressPath();
        if (medialFileCompressPath != null) {
            stmt.bindString(12, medialFileCompressPath);
        }
        stmt.bindLong(13, entity.getResourseType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadFileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContentId());
        stmt.bindLong(3, entity.getQuId());
        stmt.bindLong(4, entity.getAnsId());
 
        String medialNetUrl = entity.getMedialNetUrl();
        if (medialNetUrl != null) {
            stmt.bindString(5, medialNetUrl);
        }
 
        String medialFileType = entity.getMedialFileType();
        if (medialFileType != null) {
            stmt.bindString(6, medialFileType);
        }
 
        String medialFilePath = entity.getMedialFilePath();
        if (medialFilePath != null) {
            stmt.bindString(7, medialFilePath);
        }
 
        String medialFilePic = entity.getMedialFilePic();
        if (medialFilePic != null) {
            stmt.bindString(8, medialFilePic);
        }
 
        String medialFilePathSuffix = entity.getMedialFilePathSuffix();
        if (medialFilePathSuffix != null) {
            stmt.bindString(9, medialFilePathSuffix);
        }
 
        String audioJson = entity.getAudioJson();
        if (audioJson != null) {
            stmt.bindString(10, audioJson);
        }
        stmt.bindLong(11, entity.getUploadStatus());
 
        String medialFileCompressPath = entity.getMedialFileCompressPath();
        if (medialFileCompressPath != null) {
            stmt.bindString(12, medialFileCompressPath);
        }
        stmt.bindLong(13, entity.getResourseType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadFileEntity readEntity(Cursor cursor, int offset) {
        UploadFileEntity entity = new UploadFileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // contentId
            cursor.getLong(offset + 2), // quId
            cursor.getLong(offset + 3), // ansId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // medialNetUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // medialFileType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // medialFilePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // medialFilePic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // medialFilePathSuffix
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // audioJson
            cursor.getInt(offset + 10), // uploadStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // medialFileCompressPath
            cursor.getInt(offset + 12) // resourseType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadFileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContentId(cursor.getLong(offset + 1));
        entity.setQuId(cursor.getLong(offset + 2));
        entity.setAnsId(cursor.getLong(offset + 3));
        entity.setMedialNetUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMedialFileType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMedialFilePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMedialFilePic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMedialFilePathSuffix(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAudioJson(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUploadStatus(cursor.getInt(offset + 10));
        entity.setMedialFileCompressPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setResourseType(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadFileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadFileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadFileEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
