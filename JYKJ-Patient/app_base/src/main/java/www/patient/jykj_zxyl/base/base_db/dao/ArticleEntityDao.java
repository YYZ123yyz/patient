package www.patient.jykj_zxyl.base.base_db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import www.patient.jykj_zxyl.base.base_db.entity.ArticleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "article_entity".
*/
public class ArticleEntityDao extends AbstractDao<ArticleEntity, Long> {

    public static final String TABLENAME = "article_entity";

    /**
     * Properties of entity ArticleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property CcId = new Property(2, String.class, "ccId", false, "ccId");
        public final static Property ArticleContentJson = new Property(3, String.class, "articleContentJson", false, "article_content_json");
        public final static Property ArticleContentTest = new Property(4, String.class, "articleContentTest", false, "article_content_test");
    }


    public ArticleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"article_entity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" TEXT," + // 1: userId
                "\"ccId\" TEXT," + // 2: ccId
                "\"article_content_json\" TEXT," + // 3: articleContentJson
                "\"article_content_test\" TEXT);"); // 4: articleContentTest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"article_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String ccId = entity.getCcId();
        if (ccId != null) {
            stmt.bindString(3, ccId);
        }
 
        String articleContentJson = entity.getArticleContentJson();
        if (articleContentJson != null) {
            stmt.bindString(4, articleContentJson);
        }
 
        String articleContentTest = entity.getArticleContentTest();
        if (articleContentTest != null) {
            stmt.bindString(5, articleContentTest);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String ccId = entity.getCcId();
        if (ccId != null) {
            stmt.bindString(3, ccId);
        }
 
        String articleContentJson = entity.getArticleContentJson();
        if (articleContentJson != null) {
            stmt.bindString(4, articleContentJson);
        }
 
        String articleContentTest = entity.getArticleContentTest();
        if (articleContentTest != null) {
            stmt.bindString(5, articleContentTest);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleEntity readEntity(Cursor cursor, int offset) {
        ArticleEntity entity = new ArticleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ccId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // articleContentJson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // articleContentTest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCcId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArticleContentJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticleContentTest(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArticleEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
