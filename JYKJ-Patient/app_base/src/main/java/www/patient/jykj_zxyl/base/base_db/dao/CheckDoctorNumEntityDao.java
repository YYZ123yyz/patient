package www.patient.jykj_zxyl.base.base_db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import www.patient.jykj_zxyl.base.base_db.entity.CheckDoctorNumEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "check_doctor_num".
*/
public class CheckDoctorNumEntityDao extends AbstractDao<CheckDoctorNumEntity, String> {

    public static final String TABLENAME = "check_doctor_num";

    /**
     * Properties of entity CheckDoctorNumEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DocId = new Property(0, String.class, "docId", true, "DOC_ID");
        public final static Property UsedNum = new Property(1, int.class, "UsedNum", false, "used_num");
    }


    public CheckDoctorNumEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDoctorNumEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"check_doctor_num\" (" + //
                "\"DOC_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: docId
                "\"used_num\" INTEGER NOT NULL );"); // 1: UsedNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"check_doctor_num\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckDoctorNumEntity entity) {
        stmt.clearBindings();
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(1, docId);
        }
        stmt.bindLong(2, entity.getUsedNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckDoctorNumEntity entity) {
        stmt.clearBindings();
 
        String docId = entity.getDocId();
        if (docId != null) {
            stmt.bindString(1, docId);
        }
        stmt.bindLong(2, entity.getUsedNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CheckDoctorNumEntity readEntity(Cursor cursor, int offset) {
        CheckDoctorNumEntity entity = new CheckDoctorNumEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // docId
            cursor.getInt(offset + 1) // UsedNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckDoctorNumEntity entity, int offset) {
        entity.setDocId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsedNum(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CheckDoctorNumEntity entity, long rowId) {
        return entity.getDocId();
    }
    
    @Override
    public String getKey(CheckDoctorNumEntity entity) {
        if(entity != null) {
            return entity.getDocId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckDoctorNumEntity entity) {
        return entity.getDocId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
